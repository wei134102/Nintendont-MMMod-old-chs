name: Build Nintendont (Windows)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Debug - Check repository structure
      shell: powershell
      run: |
        echo "Current directory structure:" 
        Get-ChildItem -Path . -Recurse | Select-Object FullName | Format-Table -HideTableHeaders
        echo "Contents of tools directory:" 
        Get-ChildItem -Path .\tools -Recurse | Select-Object FullName | Format-Table -HideTableHeaders
    
    - name: Set up dependencies
      shell: powershell
      run: |
        # Create toolchain directory
        echo "Creating C:\devkitPro directory..."
        New-Item -ItemType Directory -Force -Path C:\devkitPro
        
        # Verify files in tools directory
        echo "Verifying files in tools directory..."
        if (!(Test-Path -Path .\tools\devkitARM.7z)) { echo "Error: devkitARM.7z file not found!"; exit 1 }
        if (!(Test-Path -Path .\tools\devkitPPC.7z)) { echo "Error: devkitPPC.7z file not found!"; exit 1 }
        if (!(Test-Path -Path .\tools\libogc.7z)) { echo "Error: libogc.7z file not found!"; exit 1 }
        
        # Extract devkitARM.7z from tools directory to C:\devkitPro
        echo "Extracting devkitARM.7z..."
        7z x -y .\tools\devkitARM.7z -oC:\devkitPro
        if ($LASTEXITCODE -ne 0) { echo "Error: Failed to extract devkitARM.7z!"; exit 1 }
        
        # Extract devkitPPC.7z from tools directory to C:\devkitPro
        # Note: devkitppc-rules is already included in devkitPPC.7z
        echo "Extracting devkitPPC.7z..."  
        7z x -y .\tools\devkitPPC.7z -oC:\devkitPro
        if ($LASTEXITCODE -ne 0) { echo "Error: Failed to extract devkitPPC.7z!"; exit 1 }
        
        # Extract libogc.7z from tools directory to C:\devkitPro
        echo "Extracting libogc.7z..."  
        7z x -y .\tools\libogc.7z -oC:\devkitPro
        if ($LASTEXITCODE -ne 0) { echo "Error: Failed to extract libogc.7z!"; exit 1 }
        
        # Display directory structure after extraction for debugging
        echo "Directory structure of C:\devkitPro after extraction:" 
        Get-ChildItem -Path C:\devkitPro -Recurse | Select-Object FullName | Format-Table -HideTableHeaders

    - name: Set environment variables
      shell: powershell
      run: |
        # Set environment variables
        echo "DEVKITPRO=C:\devkitPro" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "DEVKITARM=C:\devkitPro\devkitARM" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "DEVKITPPC=C:\devkitPro\devkitPPC" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        # Add toolchain bin directories to PATH
        echo "PATH=%PATH%;C:\devkitPro\devkitARM\bin;C:\devkitPro\devkitPPC\bin" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        # Verify environment variables
        echo "Environment variables:" 
        echo "DEVKITPRO=$env:DEVKITPRO"
        echo "DEVKITARM=$env:DEVKITARM"
        echo "DEVKITPPC=$env:DEVKITPPC"
        echo "PATH=$env:PATH"
        
        # Verify toolchain directories
        echo "Verifying toolchain directories..."
        if (!(Test-Path -Path C:\devkitPro\devkitARM)) { echo "Error: devkitARM directory not found!"; exit 1 }
        if (!(Test-Path -Path C:\devkitPro\devkitPPC)) { echo "Error: devkitPPC directory not found!"; exit 1 }
        
        # Display contents of toolchain bin directories
        echo "Contents of devkitARM/bin directory:" 
        if (Test-Path -Path C:\devkitPro\devkitARM\bin) {
          Get-ChildItem -Path C:\devkitPro\devkitARM\bin | Select-Object Name | Format-Table -HideTableHeaders
        }
        echo "Contents of devkitPPC/bin directory:" 
        if (Test-Path -Path C:\devkitPro\devkitPPC\bin) {
          Get-ChildItem -Path C:\devkitPro\devkitPPC\bin | Select-Object Name | Format-Table -HideTableHeaders
        }

    - name: Build Nintendont
      shell: powershell
      run: |
        # Display current environment variables
        echo "Environment variables before build:" 
        echo "DEVKITPRO=$env:DEVKITPRO"
        echo "DEVKITARM=$env:DEVKITARM"
        echo "DEVKITPPC=$env:DEVKITPPC"
        echo "PATH=$env:PATH"
        
        # Execute make command in Windows environment with windows=1 parameter
        echo "Compiling with make command, passing windows=1 parameter..."
        try {
          make forced windows=1
          if ($LASTEXITCODE -ne 0) { echo "Warning: make command returned non-zero exit code!"; exit 1 }
        } catch {
          echo "Error: make command execution failed!"; exit 1
        }
    
    - name: Verify build output
      shell: powershell
      run: |
        # Check if loader directory exists
        echo "Checking loader directory..."
        if (!(Test-Path -Path .\loader)) { echo "Error: loader directory not found!"; exit 1 }
        
        # Display contents of loader directory
        echo "Contents of loader directory:" 
        Get-ChildItem -Path .\loader | Select-Object Name | Format-Table -HideTableHeaders
        
        # Check if loader.dol file was generated
        if (Test-Path -Path .\loader\loader.dol) {
          echo "Build successful, loader.dol file has been generated!"
          Get-ChildItem -Path .\loader\loader.dol | Select-Object FullName, Length | Format-Table
        } else {
          echo "Error: loader.dol file was not generated!"; exit 1
        }
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: nintendont-loader
        path: loader\loader.dol